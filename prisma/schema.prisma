// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  username   String      @unique
  password   String
  name       String
  level      UserLevel
  sessions   Session[]
  ownedClass Kelas[]
  classMates ClassMate[]
  tasks      Task[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String
  expire    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassMate {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Kelas  @relation(fields: [classId], references: [id], onDelete: Cascade)
  userId  String
  classId String

  @@id([userId, classId])
}

model Kelas {
  id        String      @id @default(cuid())
  className String
  section   String
  password  String?
  posts     Post[]
  users     ClassMate[]
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Post {
  id         String           @id @default(cuid())
  sentence   String
  attachment PostAttachment[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Class      Kelas?           @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId    String?
}

model Task {
  id          String           @id @default(cuid())
  title       String
  instruction String?
  dueDate     DateTime?
  attachment  TaskAttachment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  User        User?            @relation(fields: [userId], references: [id])
  userId      String?
}

model PostAttachment {
  Post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @id
  file   String
}

model TaskAttachment {
  Task   Task?  @relation(fields: [taskId], references: [id])
  taskId String @id
  file   String
}

enum UserLevel {
  ADMIN
  TEACHER
  STUDENT
}
