// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(cuid())
  username    String           @unique
  password    String
  name        String
  level       UserLevel
  sessions    Session[]
  ownedClass  Kelas[]
  classMates  ClassMate[]
  tasks       Task[]
  assignments TaskAssignment[]
  posts       Post[]
  comments    PostComment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String
  expire    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassMate {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Kelas  @relation(fields: [classId], references: [id], onDelete: Cascade)
  userId  String
  classId String

  @@id([userId, classId])
}

model Kelas {
  id         String       @id @default(cuid())
  className  String
  section    String
  password   String?
  posts      Post[]
  tasks      Task[]
  users      ClassMate[]
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  InviteCode InviteCode[]
}

model Post {
  id         String           @id @default(cuid())
  sentence   String
  attachment PostAttachment[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Class      Kelas?           @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId    String?
  Writer     User?            @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId   String?
  comment    PostComment[]
}

model Task {
  id          String           @id @default(cuid())
  title       String
  instruction String?
  dueDate     DateTime?
  attachment  TaskAttachment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  User        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  Kelas       Kelas?           @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  kelasId     String?
  assignment  TaskAssignment[]
}

model TaskAssignment {
  id         String                 @id @default(uuid())
  Task       Task?                  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  file       String
  text       String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  User       User?                  @relation(fields: [userId], references: [id])
  userId     String?
  attachment AssignmentAttachment[]
}

model AssignmentAttachment {
  id           String          @id @default(uuid())
  assigment    TaskAssignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  file         String
}

model PostAttachment {
  id     String @id @default(uuid())
  Post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  file   String
}

model PostComment {
  id        String   @id @default(uuid())
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  text      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model TaskAttachment {
  id     String @id @default(uuid())
  Task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  file   String
}

model InviteCode {
  code    String @id
  kelas   Kelas  @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  kelasId String
}

enum UserLevel {
  SUPER_TEACHER
  TEACHER
  STUDENT
}
